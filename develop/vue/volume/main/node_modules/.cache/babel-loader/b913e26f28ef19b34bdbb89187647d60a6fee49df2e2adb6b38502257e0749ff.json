{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'https://localhost/api/',\n  timeout: 1000 // Timeout porsiaca ya haremos pruebas\n  //headers: {'X-Custom-Header': 'foobar'} Aqui meteremos el bearer por ejemplo\n});\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('userToken');\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst isTokenExpired = token => {\n  const payloadBase64 = token.split('.')[1];\n  const decodedPayload = JSON.parse(atob(payloadBase64));\n  const exp = decodedPayload.exp;\n  const now = Date.now() / 1000;\n  return exp < now;\n};\nif (token && isTokenExpired(token)) {\n  alert('Tu sesi贸n ha expirado. Por favor, inicia sesi贸n nuevamente.');\n}\naxios.interceptors.response.use(response => response, error => {\n  if (error.response.status === 401) {}\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","isTokenExpired","payloadBase64","split","decodedPayload","JSON","parse","atob","exp","now","Date","alert","response","status"],"sources":["/Trascendence/src/methods/axiosService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n\r\n    baseURL: 'https://localhost/api/',\r\n    timeout: 1000 // Timeout porsiaca ya haremos pruebas\r\n    //headers: {'X-Custom-Header': 'foobar'} Aqui meteremos el bearer por ejemplo\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    config => {\r\n      const token = localStorage.getItem('userToken');\r\n      if (token) {\r\n        config.headers['Authorization'] = 'Bearer ' + token;\r\n      }\r\n      return config;\r\n    },\r\n    error => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const isTokenExpired = (token) => {\r\n    const payloadBase64 = token.split('.')[1];\r\n    const decodedPayload = JSON.parse(atob(payloadBase64));\r\n    const exp = decodedPayload.exp;\r\n    const now = Date.now() / 1000;\r\n    return exp < now;\r\n  };\r\n  \r\n  if (token && isTokenExpired(token)) {\r\n    alert('Tu sesi贸n ha expirado. Por favor, inicia sesi贸n nuevamente.');\r\n  }\r\n\r\naxios.interceptors.response.use(response => response, error => {\r\n    if (error.response.status === 401) {\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n\r\nexport default axiosInstance;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAE/BC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,IAAI,CAAC;EACd;AACJ,CAAC,CAAC;AAEFH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAClCC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,KAAK;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMG,cAAc,GAAIP,KAAK,IAAK;EAChC,MAAMQ,aAAa,GAAGR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,aAAa,CAAC,CAAC;EACtD,MAAMM,GAAG,GAAGJ,cAAc,CAACI,GAAG;EAC9B,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;EAC7B,OAAOD,GAAG,GAAGC,GAAG;AAClB,CAAC;AAED,IAAIf,KAAK,IAAIO,cAAc,CAACP,KAAK,CAAC,EAAE;EAClCiB,KAAK,CAAC,6DAA6D,CAAC;AACtE;AAEF1B,KAAK,CAACK,YAAY,CAACsB,QAAQ,CAACpB,GAAG,CAACoB,QAAQ,IAAIA,QAAQ,EAAEd,KAAK,IAAI;EAC3D,IAAIA,KAAK,CAACc,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE,CACnC;EACA,OAAOd,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEJ,eAAeZ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}