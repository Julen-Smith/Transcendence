{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'https://localhost/api/',\n  timeout: 1000 // Timeout porsiaca ya haremos pruebas\n  //headers: {'X-Custom-Header': 'foobar'} Aqui meteremos el bearer por ejemplo\n});\n/*\naxiosInstance.interceptors.request.use(\n    config => {\n      const token = localStorage.getItem('userToken');\n      if (token) {\n        config.headers['Authorization'] = 'Bearer ' + token;\n      }\n      return config;\n    },\n    error => {\n      return Promise.reject(error);\n    }\n  );\n\n  const isTokenExpired = (token) => {\n    const payloadBase64 = token.split('.')[1];\n    const decodedPayload = JSON.parse(atob(payloadBase64));\n    const exp = decodedPayload.exp;\n    const now = Date.now() / 1000;\n    return exp < now;\n  };\n  \n  if (token && isTokenExpired(token)) {\n    alert('Tu sesi贸n ha expirado. Por favor, inicia sesi贸n nuevamente.');\n  }\n\naxios.interceptors.response.use(response => response, error => {\n    if (error.response.status === 401) {\n    }\n    return Promise.reject(error);\n  });\n*/\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","timeout"],"sources":["/Users/edurne/trans/develop/vue/volume/main/src/methods/axiosService.js"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n\n    baseURL: 'https://localhost/api/',\n    timeout: 1000 // Timeout porsiaca ya haremos pruebas\n    //headers: {'X-Custom-Header': 'foobar'} Aqui meteremos el bearer por ejemplo\n});\n/*\naxiosInstance.interceptors.request.use(\n    config => {\n      const token = localStorage.getItem('userToken');\n      if (token) {\n        config.headers['Authorization'] = 'Bearer ' + token;\n      }\n      return config;\n    },\n    error => {\n      return Promise.reject(error);\n    }\n  );\n\n  const isTokenExpired = (token) => {\n    const payloadBase64 = token.split('.')[1];\n    const decodedPayload = JSON.parse(atob(payloadBase64));\n    const exp = decodedPayload.exp;\n    const now = Date.now() / 1000;\n    return exp < now;\n  };\n  \n  if (token && isTokenExpired(token)) {\n    alert('Tu sesi贸n ha expirado. Por favor, inicia sesi贸n nuevamente.');\n  }\n\naxios.interceptors.response.use(response => response, error => {\n    if (error.response.status === 401) {\n    }\n    return Promise.reject(error);\n  });\n*/\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAE/BC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE,IAAI,CAAC;EACd;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}